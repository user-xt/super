{"remainingRequest":"/Volumes/张天天/web/vue/super/node_modules/babel-loader/lib/index.js!/Volumes/张天天/web/vue/super/src/network/request.js","dependencies":[{"path":"/Volumes/张天天/web/vue/super/src/network/request.js","mtime":1571126579034},{"path":"/Volumes/张天天/web/vue/super/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/张天天/web/vue/super/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nexport function request(config) {\n  // 1.创建axios的实例\n  var instance = axios.create({\n    baseURL: 'http://123.207.32.32:8000',\n    timeout: 5000\n  }); // 2.axios的拦截器\n  // 2.1.请求拦截的作用\n\n  instance.interceptors.request.use(function (config) {\n    return config;\n  }, function (err) {// console.log(err);\n  }); // 2.2.响应拦截\n\n  instance.interceptors.response.use(function (res) {\n    return res.data;\n  }, function (err) {\n    console.log(err);\n  }); // 3.发送真正的网络请求\n\n  return instance(config);\n}",{"version":3,"sources":["/Volumes/张天天/web/vue/super/src/network/request.js"],"names":["axios","request","config","instance","create","baseURL","timeout","interceptors","use","err","response","res","data","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC5BC,IAAAA,OAAO,EAAE,2BADmB;AAE5BC,IAAAA,OAAO,EAAE;AAFmB,GAAb,CAAjB,CAF8B,CAO9B;AACA;;AACAH,EAAAA,QAAQ,CAACI,YAAT,CAAsBN,OAAtB,CAA8BO,GAA9B,CAAkC,UAAAN,MAAM,EAAI;AAC1C,WAAOA,MAAP;AACD,GAFD,EAEG,UAAAO,GAAG,EAAI,CACR;AACD,GAJD,EAT8B,CAe9B;;AACAN,EAAAA,QAAQ,CAACI,YAAT,CAAsBG,QAAtB,CAA+BF,GAA/B,CAAmC,UAAAG,GAAG,EAAI;AACxC,WAAOA,GAAG,CAACC,IAAX;AACD,GAFD,EAEG,UAAAH,GAAG,EAAI;AACRI,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACD,GAJD,EAhB8B,CAsB9B;;AACA,SAAON,QAAQ,CAACD,MAAD,CAAf;AACD","sourcesContent":["import axios from 'axios'\n\nexport function request(config) {\n  // 1.创建axios的实例\n  const instance = axios.create({\n    baseURL: 'http://123.207.32.32:8000',\n    timeout: 5000\n  })\n\n  // 2.axios的拦截器\n  // 2.1.请求拦截的作用\n  instance.interceptors.request.use(config => {\n    return config\n  }, err => {\n    // console.log(err);\n  })\n\n  // 2.2.响应拦截\n  instance.interceptors.response.use(res => {\n    return res.data\n  }, err => {\n    console.log(err);\n  })\n\n  // 3.发送真正的网络请求\n  return instance(config)\n}"]}]}